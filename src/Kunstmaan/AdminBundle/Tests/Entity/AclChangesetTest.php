<?php

namespace Kunstmaan\AdminBundle\Tests\Entity;

use Kunstmaan\AdminBundle\Entity\AclChangeset;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2012-08-29 at 14:40:17.
 *
 * @coversNothing
 */
class AclChangesetTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var AclChangeset
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new AclChangeset();
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers \Kunstmaan\AdminBundle\Entity\AclChangeset::__construct
     */
    public function test__construct()
    {
        $object = new AclChangeset();
        $this->assertSame(AclChangeset::STATUS_NEW, $object->getStatus());
    }

    /**
     * @covers \Kunstmaan\AdminBundle\Entity\AclChangeset::setChangeset
     * @covers \Kunstmaan\AdminBundle\Entity\AclChangeset::getChangeset
     */
    public function testSetAndGetChangeset()
    {
        $changeset = ['ROLE_ADMIN' => ['ADD' => ['VIEW', 'EDIT'], 'DEL' => 'PUBLISH']];
        $this->object->setChangeset($changeset);

        $this->assertSame($changeset, $this->object->getChangeset());
    }

    /**
     * @covers \Kunstmaan\AdminBundle\Entity\AclChangeset::setCreated
     * @covers \Kunstmaan\AdminBundle\Entity\AclChangeset::getCreated
     */
    public function testSetAndGetCreated()
    {
        $currentDate = new \DateTime('now');
        $this->object->setCreated($currentDate);

        $this->assertSame($currentDate, $this->object->getCreated());
    }

    /**
     * @covers \Kunstmaan\AdminBundle\Entity\AclChangeset::setLastModified
     * @covers \Kunstmaan\AdminBundle\Entity\AclChangeset::getLastModified
     */
    public function testSetAndGetLastModified()
    {
        $currentDate = new \DateTime('now');
        $this->object->setLastModified($currentDate);

        $this->assertSame($currentDate, $this->object->getLastModified());
    }

    /**
     * @covers \Kunstmaan\AdminBundle\Entity\AclChangeset::setRef
     * @covers \Kunstmaan\AdminBundle\Entity\AclChangeset::setRefId
     * @covers \Kunstmaan\AdminBundle\Entity\AclChangeset::setRefEntityName
     * @covers \Kunstmaan\AdminBundle\Entity\AclChangeset::getRefId
     * @covers \Kunstmaan\AdminBundle\Entity\AclChangeset::getRefEntityName
     */
    public function testSetAndGetRef()
    {
        $entity = new TestEntity(1);
        $this->object->setRef($entity);
        $this->assertSame(1, $this->object->getRefId());
        $this->assertSame('Kunstmaan\AdminBundle\Tests\Entity\TestEntity', $this->object->getRefEntityName());
    }

    /**
     * @covers \Kunstmaan\AdminBundle\Entity\AclChangeset::setStatus
     * @covers \Kunstmaan\AdminBundle\Entity\AclChangeset::getStatus
     */
    public function testSetAndGetStatus()
    {
        $yesterday = new \DateTime('yesterday');
        $this->object->setLastModified($yesterday);

        $this->assertSame(AclChangeset::STATUS_NEW, $this->object->getStatus());

        $this->object->setStatus(AclChangeset::STATUS_RUNNING);
        $this->assertNotSame(AclChangeset::STATUS_NEW, $this->object->getStatus());
        $this->assertSame(AclChangeset::STATUS_RUNNING, $this->object->getStatus());
        $this->assertNotSame($yesterday, $this->object->getLastModified());
    }

    /**
     * @covers \Kunstmaan\AdminBundle\Entity\AclChangeset::setPid
     * @covers \Kunstmaan\AdminBundle\Entity\AclChangeset::getPid
     */
    public function testSetAndGetPid()
    {
        $this->object->setPid(10);
        $this->assertSame(10, $this->object->getPid());
    }

    /**
     * @covers \Kunstmaan\AdminBundle\Entity\AclChangeset::setUser
     * @covers \Kunstmaan\AdminBundle\Entity\AclChangeset::getUser
     */
    public function testSetAndGetUser()
    {
        $user = new \Kunstmaan\AdminBundle\Entity\User();
        $this->object->setUser($user);

        $this->assertSame($user, $this->object->getUser());
    }
}
